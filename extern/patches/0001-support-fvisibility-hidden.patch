diff --git a/Include/node.h b/Include/node.h
index 9f6760c..2cde3b9 100644
--- a/Include/node.h
+++ b/Include/node.h
@@ -21,7 +21,7 @@ PyAPI_FUNC(int) PyNode_AddChild(node *n, int type,
                                       char *str, int lineno, int col_offset);
 PyAPI_FUNC(void) PyNode_Free(node *n);
 #ifndef Py_LIMITED_API
-Py_ssize_t _PyNode_SizeOf(node *n);
+PyAPI_FUNC(Py_ssize_t) _PyNode_SizeOf(node *n);
 #endif
 
 /* Node access functions */
diff --git a/Include/pyport.h b/Include/pyport.h
index 85e852f..e8c80ec 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -759,14 +759,14 @@ extern int fdatasync(int);
 #if defined(Py_ENABLE_SHARED) || defined(__CYGWIN__)
 #       if defined(HAVE_DECLSPEC_DLL)
 #               ifdef Py_BUILD_CORE
-#                       define PyAPI_FUNC(RTYPE) __declspec(dllexport) RTYPE
-#                       define PyAPI_DATA(RTYPE) extern __declspec(dllexport) RTYPE
+#                       define PyAPI_FUNC(RTYPE) __attribute__((visibility("default"))) __declspec(dllexport) RTYPE
+#                       define PyAPI_DATA(RTYPE) __attribute__((visibility("default"))) extern __declspec(dllexport) RTYPE
         /* module init functions inside the core need no external linkage */
         /* except for Cygwin to handle embedding (FIXME: BeOS too?) */
 #                       if defined(__CYGWIN__)
-#                               define PyMODINIT_FUNC __declspec(dllexport) void
+#                               define PyMODINIT_FUNC __attribute__((visibility("default"))) __declspec(dllexport) void
 #                       else /* __CYGWIN__ */
-#                               define PyMODINIT_FUNC void
+#                               define PyMODINIT_FUNC __attribute__((visibility("default"))) void
 #                       endif /* __CYGWIN__ */
 #               else /* Py_BUILD_CORE */
         /* Building an extension module, or an embedded situation */
@@ -775,14 +775,14 @@ extern int fdatasync(int);
         /* failures similar to those described at the bottom of 4.1: */
         /* http://docs.python.org/extending/windows.html#a-cookbook-approach */
 #                       if !defined(__CYGWIN__)
-#                               define PyAPI_FUNC(RTYPE) __declspec(dllimport) RTYPE
+#                               define PyAPI_FUNC(RTYPE) __attribute__((visibility("default"))) __declspec(dllimport) RTYPE
 #                       endif /* !__CYGWIN__ */
-#                       define PyAPI_DATA(RTYPE) extern __declspec(dllimport) RTYPE
+#                       define PyAPI_DATA(RTYPE) __attribute__((visibility("default"))) extern __declspec(dllimport) RTYPE
         /* module init functions outside the core must be exported */
 #                       if defined(__cplusplus)
-#                               define PyMODINIT_FUNC extern "C" __declspec(dllexport) void
+#                               define PyMODINIT_FUNC __attribute__((visibility("default"))) extern "C" __declspec(dllexport) void
 #                       else /* __cplusplus */
-#                               define PyMODINIT_FUNC __declspec(dllexport) void
+#                               define PyMODINIT_FUNC __attribute__((visibility("default"))) __declspec(dllexport) void
 #                       endif /* __cplusplus */
 #               endif /* Py_BUILD_CORE */
 #       endif /* HAVE_DECLSPEC */
@@ -790,16 +790,16 @@ extern int fdatasync(int);
 
 /* If no external linkage macros defined by now, create defaults */
 #ifndef PyAPI_FUNC
-#       define PyAPI_FUNC(RTYPE) RTYPE
+#       define PyAPI_FUNC(RTYPE) __attribute__((visibility("default"))) RTYPE
 #endif
 #ifndef PyAPI_DATA
-#       define PyAPI_DATA(RTYPE) extern RTYPE
+#       define PyAPI_DATA(RTYPE) __attribute__((visibility("default"))) extern RTYPE
 #endif
 #ifndef PyMODINIT_FUNC
 #       if defined(__cplusplus)
-#               define PyMODINIT_FUNC extern "C" void
+#               define PyMODINIT_FUNC __attribute__((visibility("default"))) extern "C" void
 #       else /* __cplusplus */
-#               define PyMODINIT_FUNC void
+#               define PyMODINIT_FUNC __attribute__((visibility("default"))) void
 #       endif /* __cplusplus */
 #endif
 
@@ -807,14 +807,14 @@ extern int fdatasync(int);
 #if defined(Py_ENABLE_SHARED) && defined (HAVE_DECLSPEC_DLL)
 #       if defined(Py_BUILD_CORE)
 #               define DL_IMPORT(RTYPE) __declspec(dllexport) RTYPE
-#               define DL_EXPORT(RTYPE) __declspec(dllexport) RTYPE
+#               define DL_EXPORT(RTYPE) __attribute__((visibility("default"))) __declspec(dllexport) RTYPE
 #       else
 #               define DL_IMPORT(RTYPE) __declspec(dllimport) RTYPE
-#               define DL_EXPORT(RTYPE) __declspec(dllexport) RTYPE
+#               define DL_EXPORT(RTYPE) __attribute__((visibility("default"))) __declspec(dllexport) RTYPE
 #       endif
 #endif
 #ifndef DL_EXPORT
-#       define DL_EXPORT(RTYPE) RTYPE
+#       define DL_EXPORT(RTYPE) __attribute__((visibility("default"))) RTYPE
 #endif
 #ifndef DL_IMPORT
 #       define DL_IMPORT(RTYPE) RTYPE
diff --git a/Modules/_hotshot.c b/Modules/_hotshot.c
index df8a7f9..4f726dd 100644
--- a/Modules/_hotshot.c
+++ b/Modules/_hotshot.c
@@ -1604,7 +1604,7 @@ static PyMethodDef functions[] = {
 };
 
 
-void
+PyMODINIT_FUNC
 init_hotshot(void)
 {
     PyObject *module;
diff --git a/Modules/_json.c b/Modules/_json.c
index c913409..3b0bdbf 100644
--- a/Modules/_json.c
+++ b/Modules/_json.c
@@ -2391,7 +2391,7 @@ static PyMethodDef speedups_methods[] = {
 PyDoc_STRVAR(module_doc,
 "json speedups\n");
 
-void
+PyMODINIT_FUNC
 init_json(void)
 {
     PyObject *m;
diff --git a/Modules/cjkcodecs/cjkcodecs.h b/Modules/cjkcodecs/cjkcodecs.h
index 7e8390a..ac84eab 100644
--- a/Modules/cjkcodecs/cjkcodecs.h
+++ b/Modules/cjkcodecs/cjkcodecs.h
@@ -386,8 +386,8 @@ errorexit:
 }
 #endif
 
-#define I_AM_A_MODULE_FOR(loc)                                          \
-    void                                                                \
+#define I_AM_A_MODULE_FOR(loc) \
+    PyMODINIT_FUNC                                                      \
     init_codecs_##loc(void)                                             \
     {                                                                   \
         PyObject *m = Py_InitModule("_codecs_" #loc, __methods);\
diff --git a/Python/getargs.c b/Python/getargs.c
index 81a2721..59f2055 100644
--- a/Python/getargs.c
+++ b/Python/getargs.c
@@ -18,7 +18,7 @@ int PyArg_ParseTupleAndKeywords(PyObject *, PyObject *,
 int PyArg_VaParseTupleAndKeywords(PyObject *, PyObject *,
                                 const char *, char **, va_list);
 
-#ifdef HAVE_DECLSPEC_DLL
+#if 1
 /* Export functions */
 PyAPI_FUNC(int) _PyArg_Parse_SizeT(PyObject *, char *, ...);
 PyAPI_FUNC(int) _PyArg_ParseTuple_SizeT(PyObject *, char *, ...);
diff --git a/setup.py b/setup.py
index 2b4119a..8109bc0 100644
--- a/setup.py
+++ b/setup.py
@@ -2024,7 +2024,7 @@ class PyBuildExt(build_ext):
 
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
-                cmd = "cd %s && env CFLAGS='' '%s/configure' %s" \
+                cmd = "cd %s && env CFLAGS='-fvisibility=hidden' '%s/configure' %s" \
                       % (ffi_builddir, ffi_srcdir, " ".join(config_args))
 
                 res = os.system(cmd)
